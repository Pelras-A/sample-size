

library(shiny)
library(shinydashboard)
library(epiR)
library(shinythemes)
library(shinyjs)


#J:/4-MÃ©thodologiste/Antoine/logo-chu-poitiers_numerique.png

ui <- fluidPage(
  useShinyjs(),
  shinythemes::themeSelector(),
  fluidRow(style = "height:100px",
           column(width = 3,
                  style = "height:100%",
                  tags$img(src = "logo-Horizontal-CHU-poitiers_Couleurs.png",
                    style = 'height: 100%')),
           column(width = 9,
                  style="height: 100%",
                  includeHTML("appName.html"))
           ),
  fluidRow(
  navbarPage(title = icon("users",class ="fa-solid fa-users"),
             id = "hypMenu",
             tabPanel(title = "READ ME",
                      id = "RM",
                      includeHTML("ReadMe.html")),
             tabPanel(title = "CALCULATOR",
                      id = "C",
             tabsetPanel(

# PAGE COMPARING PROPORTION -----------------------------------------------------------------------------------------------------
             tabPanel(title = "COMPARING PROPORTIONS",
                      id = "CP",
                      fluidRow(column(width = 12,
                                      h3("COMPARING PROPORTIONS :"),
                                      p("Evaluation of treatment effect based on discrete 
                                      clinical endpoint, the proportions of events that have 
                                      occurred between treatment groups are compared."))),
                      br(),
                      sidebarLayout(
                        sidebarPanel(
                          selectInput(inputId = "hypProp",
                                      label = "Hypothesis",
                                      choices = c(" ","Superiority", "Non-inferiority")),
                          #when an item is selected, the next appear
                          conditionalPanel(
                            condition = "input.hypProp=='Superiority' || input.hypProp=='Non-inferiority'",
                            numericInput(inputId = "puissanceProp",
                                         label = "Power (%)",
                                         value = NULL,
                                         max = 100,
                                         min = 0),
                            conditionalPanel(
                              condition = "input.puissanceProp",
                              numericInput(inputId = "alphaProp",
                                           label = "Alpha (%)",
                                           value = NULL,
                                           max = 20,
                                           min = 0,
                                           step = 0.5),
                              conditionalPanel(
                                condition = "input.alphaProp ",
                                h5("Define the mean expected in the experimental group"),
                                numericInput(inputId = "obsProp",
                                             label = "Experimental",
                                             value = NULL,
                                             step = 0.005),
                                h5("Define the mean expected in the control group"),
                                numericInput(inputId = "prevProp",
                                             label = "Control",
                                             value = NULL,
                                             step = 0.005),
                                conditionalPanel(
                                  condition = "input.hypProp == 'Non-inferiority'",
                                  numericInput(inputId = "deltaProp",
                                               label = "Delta",
                                               value = NULL,
                                               step = 0.005))
                                )
                              )
                            )
                          ),
                        mainPanel(actionButton(inputId = "Prop", label =  "Results"),
                                  br(),
                                  verbatimTextOutput("proportion"))
                        )
                      ), 
             tabPanel(title = "COMPARING MEANS",
                      id = "CM",
                      fluidRow(column(width = 12,
                                      h3("COMPARING MEANS"),
                                      p("Evaluation of the effect within a given treatment, the 
                                      null hypothesis of interest is to test whether there is a 
                                      significant difference in mean change from baseline to endpoint."))),
                      br(),
                      sidebarLayout(
                        sidebarPanel(
                          selectInput(inputId = "hypMean",
                                      label = "Hypothesis",
                                      choices = c(" ","Superiority", "Non-inferiority")), 
                          #when an item is selected, the next appear
                          conditionalPanel(
                            condition = "input.hypMean=='Superiority' || input.hypMean=='Non-inferiority'",
                            numericInput(inputId = "puissanceMean",
                                         label = "Power (%)",
                                         value = NULL,
                                         max = 100,
                                         min = 0),
                            conditionalPanel(
                              condition = "input.puissanceMean",
                              numericInput(inputId = "alphaMean",
                                           label = "Alpha (%)",
                                           value = NULL,
                                           max = 20,
                                           min = 0,
                                           step = 0.5),
                              conditionalPanel(
                                condition = "input.alphaMean ",
                                h5("Define the mean expected in the experimental group"),
                                numericInput(inputId = "obsMean",
                                             label = "Experimental",
                                             value = NULL,
                                             step = 0.005),
                                h5("Define the mean expected in the control group"),
                                numericInput(inputId = "prevMean",
                                             label = "Control",
                                             value = NULL,
                                             step = 0.005),
                                conditionalPanel(
                                  condition = "input.hypMean == 'Non-inferiority'",
                                  numericInput(inputId = "deltaMean",
                                               label = "Delta",
                                               value = NULL,
                                               step = 0.005)
                                  ), # delta (non-inferiority)
                                conditionalPanel(
                                  condition = "input.prevMean",
                                  numericInput(inputId = "sigmaMean",
                                               label = "Sigma",
                                               value = NULL,
                                               step = 0.005),
                                  conditionalPanel(
                                    condition = "input$sigmaMean",
                                    selectInput(inputId = "sidetestMean",
                                                label = "test",
                                                choices = c("two-sided", "one-sided"))
                                    ) # one or two sided
                                  ) # sigma
                                ) # mean expected
                              ) # alpha
                            ) # puissance
                          ), # sidebar panel
                        mainPanel(actionButton("Mean", "Results"),
                                  br(),
                                  verbatimTextOutput("mean"))
                        ) # sidebarLayout
                      ), # Comparing means
), # Page 
), # fluidRow
  ),
# Page
)
)
#--------------------------------------------------------------------------------------------------------------------------

server <- function(input, output) {
  
  stMean <- reactive( if (reactive(input$sidetestMean)()=="one-sided") 1 else 2 )
  
  stProp <- reactive( if (reactive(input$sidetestProp)()=="one-sided") 1 else 2 )

  
  resMean <- eventReactive(input$Mean,{
    epi.sscompc(N = NA, treat = input$prevMean, control = input$obsMean, 
                sigma = input$sigmaMean, n = NA, power = input$puissanceMean/100, 
                r = 1, design = 1, sided.test = stMean(), conf.level = 1-(input$alphaMean/100))})
  
  resProp <- eventReactive(input$Prop,{
    epi.sscompc(N = NA, treat = input$prevProp, control = input$obsProp, 
                sigma = input$sigmaProp, n = NA, power = input$puissanceProp/100, 
                r = 1, design = 1, sided.test = stProp(), conf.level = 1-(input$alphaProp/100))})
  
  output$mean <- renderText(resMean()$n.treat)
  output$proportion <- renderText(resProp()$n.treat)
}

# Run the application
shinyApp(ui = ui, server = server)

"Cars: Fuel vs Power",  value = "t_carfp",
) # Close tabpanel t_carfp
) # Close tabset tabs_c
) # Close tabpanel Transport results
) # Close tabset tabs_a
) # End mainPanel  )   # End sidebarLayout) # End fluidPage
server <- function(input, output) { } hinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
conditionalPanel(
condition = "input.tabs == 'a1' && input.tabs_a == 't_ass'", ns = NS(NULL),
h4("Assumptions")
),
conditionalPanel(
condition = "input.tabs == 'a1' && input.tabs_a == 't_scen'",  ns = NS(NULL),
h4("Scenarios")
),
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_cara' ",  ns = NS(NULL),
h4("Car aggregate")
), # End conditionalPanel
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_carf' ",  ns = NS(NULL),
h4("Car fuel")
), # End conditionalPanel
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_carfp' ",
h4("Car fuel power:")
) # End conditionalPanel
),    # End sidebarPanel
mainPanel(
tabsetPanel(
type = "tabs", id = "tabs",
tabPanel(id = 'a1', value = 'a1',
"Assumptions and Scenarios",
tabsetPanel(
type = "tabs",  id = "tabs_a",
tabPanel(
"Assumptions",  value = "t_ass"
), # Close tabpanel t_ass,
tabPanel(
"Scenarios", value = "t_scen"
) # Close tabpanel t_scen
) # Close tabsetpanel
), # Close tabPanel t_Ass
tabPanel(id = "t1", value = "t1",
"Transport results",
tabsetPanel(
type = "tabs", id = "tabs_c",
tabPanel(
"Cars: Aggregated", value = "t_cara"
),  # Close tabpanel t_cara
tabPanel(
"Cars: Fuel",  value = "t_carf"
), # Close tabpanel
tabPanel(
id = "t_carfp",
"Cars: Fuel vs Power",  value = "t_carfp",
) # Close tabpanel t_carfp
) # Close tabset tabs_c
) # Close tabpanel Transport results
) # Close tabset tabs_a
) # End mainPanel  )   # End sidebarLayout) # End fluidPage
server <- function(input, output) { }
shinyApp(ui = ui, server = server)
ui <- fluidPage(sidebarLayout(
ui <- fluidPage(sidebarLayout(
sidebarPanel(
conditionalPanel(
condition = "input.tabs == 'a1' && input.tabs_a == 't_ass'", ns = NS(NULL),
h4("Assumptions")
),
conditionalPanel(
condition = "input.tabs == 'a1' && input.tabs_a == 't_scen'",  ns = NS(NULL),
h4("Scenarios")
),
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_cara' ",  ns = NS(NULL),
h4("Car aggregate")
), # End conditionalPanel
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_carf' ",  ns = NS(NULL),
h4("Car fuel")
), # End conditionalPanel
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_carfp' ",
h4("Car fuel power:")
) # End conditionalPanel
),    # End sidebarPanel
mainPanel(
tabsetPanel(
type = "tabs", id = "tabs",
tabPanel(id = 'a1', value = 'a1',
"Assumptions and Scenarios",
tabsetPanel(
type = "tabs",  id = "tabs_a",
tabPanel(
"Assumptions",  value = "t_ass"
), # Close tabpanel t_ass,
tabPanel(
"Scenarios", value = "t_scen"
) # Close tabpanel t_scen
) # Close tabsetpanel
), # Close tabPanel t_Ass
tabPanel(id = "t1", value = "t1",
"Transport results",
tabsetPanel(
type = "tabs", id = "tabs_c",
tabPanel(
"Cars: Aggregated", value = "t_cara"
),  # Close tabpanel t_cara
tabPanel(
"Cars: Fuel",  value = "t_carf"
), # Close tabpanel
tabPanel(
id = "t_carfp",
"Cars: Fuel vs Power",  value = "t_carfp",
) # Close tabpanel t_carfp
) # Close tabset tabs_c
) # Close tabpanel Transport results
) # Close tabset tabs_a
) # End mainPanel
)   # End sidebarLayout
) # End fluidPage
server <- function(input, output) { }
server <- function(input, output)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
conditionalPanel(
condition = "input.tabs == 'a1' && input.tabs_a == 't_ass'", ns = NS(NULL),
h4("Assumptions")
),
conditionalPanel(
condition = "input.tabs == 'a1' && input.tabs_a == 't_scen'",  ns = NS(NULL),
h4("Scenarios")
),
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_cara' ",  ns = NS(NULL),
h4("Car aggregate")
), # End conditionalPanel
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_carf' ",  ns = NS(NULL),
h4("Car fuel")
), # End conditionalPanel
conditionalPanel(
condition = "input.tabs == 't1' && input.tabs_c == 't_carfp' ",
h4("Car fuel power:")
) # End conditionalPanel
),    # End sidebarPanel
mainPanel(
tabsetPanel(
type = "tabs", id = "tabs",
tabPanel(id = 'a1', value = 'a1',
"Assumptions and Scenarios",
tabsetPanel(
type = "tabs",  id = "tabs_a",
tabPanel(
"Assumptions",  value = "t_ass"
), # Close tabpanel t_ass,
tabPanel(
"Scenarios", value = "t_scen"
) # Close tabpanel t_scen
) # Close tabsetpanel
), # Close tabPanel t_Ass
tabPanel(id = "t1", value = "t1",
"Transport results",
tabsetPanel(
type = "tabs", id = "tabs_c",
tabPanel(
"Cars: Aggregated", value = "t_cara"
),  # Close tabpanel t_cara
tabPanel(
"Cars: Fuel",  value = "t_carf"
), # Close tabpanel
tabPanel(
id = "t_carfp",
"Cars: Fuel vs Power",  value = "t_carfp",
) # Close tabpanel t_carfp
) # Close tabset tabs_c
) # Close tabpanel Transport results
) # Close tabset tabs_a
) # End mainPanel
)   # End sidebarLayout
) # End fluidPage
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
epi.ssninfb(treat = 0.35, control = 0.35, delta = 7,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 7,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 7,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.sscohortc(N = NA, irexp1 = 0.35, irexp0 = 0.28, pexp = NA, n = NA,
power = 0.80, r = 1, design = 1, sided.test = 2,
finite.correction = FALSE, nfractional = FALSE, conf.level = 0.95)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 7,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.ssninfb
epi.ssninfb(treat = 0.35, control = 0.35, delta = 7,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.ssninfc(treat = 66, control = 66, sigma = 23,
delta = 7, n = NA, power = 0.8, alpha = 0.05, r = 1)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 0.07,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 0.7,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 0.07,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.ssninfb(treat = 0.35, control = 0.28,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.sscohortc(N = NA, irexp1 = 0.35, irexp0 = 0.28, pexp = NA, n = NA,
power = 0.80, r = 1, design = 1, sided.test = 2,
finite.correction = FALSE, nfractional = FALSE, conf.level = 0.95)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 0.07,
n = NA, r = 1, power = 0.8, alpha = 0.05)
epi.sscohortc(N = NA, irexp1 = 0.28, irexp0 = 0.35, pexp = NA, n = NA,
power = 0.80, r = 1, design = 1, sided.test = 2,
finite.correction = FALSE, nfractional = FALSE, conf.level = 0.95)
epi.ssninfb(treat = 0.35, control = 0.35, delta = 0.07,
n = NA, r = 1, power = 0.8, alpha = 0.05)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
useShinyjs(),
shinythemes::themeSelector(),
fluidRow(style = "height:100px",
column(width = 3,
style = "height:100%",
tags$img(src = "logo-Horizontal-CHU-poitiers_Couleurs.png",
style = 'height: 100%')),
column(width = 9,
style="height: 100%",
includeHTML("appName.html"))
),
fluidRow(
navbarPage(title = icon("users",class ="fa-solid fa-users"),
id = "hypMenu",
tabPanel(title = "READ ME",
id = "RM",
includeHTML("ReadMe.html")),
tabPanel(title = "CALCULATOR",
id = "C",
tabsetPanel(
# PAGE COMPARING PROPORTION -----------------------------------------------------------------------------------------------------
tabPanel(title = "COMPARING PROPORTIONS",
id = "CP",
fluidRow(column(width = 12,
h3("COMPARING PROPORTIONS :"),
p("Evaluation of treatment effect based on discrete
clinical endpoint, the proportions of events that have
occurred between treatment groups are compared."))),
br(),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "hypProp",
label = "Hypothesis",
choices = c(" ","Superiority", "Non-inferiority")),
#when an item is selected, the next appear
conditionalPanel(
condition = "input.hypProp=='Superiority' || input.hypProp=='Non-inferiority'",
numericInput(inputId = "puissanceProp",
label = "Power (%)",
value = NULL,
max = 100,
min = 0),
)
),
mainPanel(actionButton(inputId = "Prop", label =  "Results"),
br(),
verbatimTextOutput("proportion"))
)
),
tabPanel(title = "COMPARING MEANS",
id = "CM",
fluidRow(column(width = 12,
h3("COMPARING MEANS"),
p("Evaluation of the effect within a given treatment, the
null hypothesis of interest is to test whether there is a
significant difference in mean change from baseline to endpoint."))),
br(),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "hypMean",
label = "Hypothesis",
choices = c(" ","Superiority", "Non-inferiority")),
#when an item is selected, the next appear
conditionalPanel(
condition = "input.hypMean=='Superiority' || input.hypMean=='Non-inferiority'",
numericInput(inputId = "puissanceMean",
label = "Power (%)",
value = NULL,
max = 100,
min = 0),
conditionalPanel(
condition = "input.puissanceMean",
numericInput(inputId = "alphaMean",
label = "Alpha (%)",
value = NULL,
max = 20,
min = 0,
step = 0.5),
conditionalPanel(
condition = "input.alphaMean ",
h5("Define the mean expected in the experimental group"),
numericInput(inputId = "obsMean",
label = "Experimental",
value = NULL,
step = 0.005),
h5("Define the mean expected in the control group"),
numericInput(inputId = "prevMean",
label = "Control",
value = NULL,
step = 0.005),
conditionalPanel(
condition = "input.hypMean == 'Non-inferiority'",
numericInput(inputId = "deltaMean",
label = "Delta",
value = NULL,
step = 0.005)
), # delta (non-inferiority)
conditionalPanel(
condition = "input.prevMean",
numericInput(inputId = "sigmaMean",
label = "Sigma",
value = NULL,
step = 0.005),
conditionalPanel(
condition = "input$sigmaMean",
selectInput(inputId = "sidetestMean",
label = "test",
choices = c("two-sided", "one-sided"))
) # one or two sided
) # sigma
) # mean expected
) # alpha
) # puissance
), # sidebar panel
mainPanel(actionButton("Mean", "Results"),
br(),
verbatimTextOutput("mean"))
) # sidebarLayout
), # Comparing means
), # Page
), # fluidRow
),
# Page
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/sample-size/APPLICATION')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
epi.sscohortc(N = NA, irexp1 = 35/100, irexp0 = 28/100, pexp = NA, n = NA,
power = 80/100, r = 1, design = 1, sided.test = 2,
finite.correction = FALSE, nfractional = FALSE, conf.level = 1-(5/100))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
epi.ssninfc(treat = 60, control = 60, sigma = 5,
delta = 3, n = NA, power = 80/100, alpha = 5/100, r = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
epi.sscohortc(N = NA, irexp1 = 35/100, irexp0 = 28/100, pexp = NA, n = NA,
power = 80/100, r = 1, design = 1, sided.test = 2,
finite.correction = FALSE, nfractional = FALSE, conf.level = 1-(5/100))
epi.ssninfb(treat = 35100, control = 35/100, delta = 7/100,
n = NA, r = 1, power = 80/100, alpha = 5/100)
epi.ssninfc(treat = 60, control = 60, sigma = 25,
delta = 7, n = NA, power = 80/100, alpha = 5/100, r = 1)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()

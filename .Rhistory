library(shiny); runApp('APPLICATION/app2.R')
kj
val <- c(1,2,3)
texte <- "toto"
paste(val, text)
paste(as.character(val), text)
as.character(val)
paste0(as.character(val), text)
paste0(as.character(val), texte)
val <- c(1,2,3)
texte <- "toto:"
paste0(texte, paste0(val))
paste0(texte, paste0(val, sep=", "))
paste0(val, sep=", ")
concat(val, sep=", ")
paste0(as.character(val), sep=", ")
paste0(as.character(val), sep="")
paste0(val, sep="")
paste0(texte, paste0(val, collapse=", "))
val <- c(1,2,3)
texte <- "toto: "
paste0(texte, paste0(val, collapse=", "))
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
paste0(c(1,2,3),"fi", collapse = TRUE)
paste0(c(1,2,3),"fi", collapse = TRUE)
paste$(c(1,2,3),"fi", collapse = TRUE)
paste(c(1,2,3),"fi", collapse = TRUE)
paste(c(1,2,3), collapse = TRUE)
paste(c("1","2","3"), collapse = TRUE)
paste(c("1","2","3"), collapse = "")
paste(c(1,2,3), collapse = "")
runApp('APPLICATION/app2.R')
ceiling(1.5,2.1)
ceiling(c(1.5,1.3))
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
tail(c(1,2,5,6,3))
tail(c(1,2,5,6,3),1)
tail(c(1,2,5,6,3),2)
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
runApp('APPLICATION/app2.R')
print("Hello!")
print("WARNING ! One group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
1 && 3
1 & 3
```r
library(epiR)
sample_proportion <- function(p1, p0, power, r, sided.test=2, conf.level=0.95) {
result <- epi.sscohortc(irexp1 = p1, irexp0 = p0, n = NA, power = power,
r = r, sided.test = sided.test, conf.level = conf.level)
if (result$n.exp1<30 && result$n.exp0<30) {
print("!!! WARNING !!! Both groups have size < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
else if (result$n.exp1<30 | result$n.exp0<30) {
print("!!! WARNING !!! One group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*result$n.exp1 <5 | pmean*result$n.exp0 <5) {
print("!!! WARNING !!! Theoretical effectives are < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
return(result)
}
sample_proportion(p1=0.01, p0=0.05, power=0.8, r=1, sided.test=2, conf.level = 0.95)
sample_proportion(p1=0.01, p0=0.05, power=0.8, r=3, sided.test=2, conf.level = 0.95)
sample_proportion <- function(p1, p0, power, r, sided.test=2, conf.level=0.95) {
result <- epi.sscohortc(irexp1 = p1, irexp0 = p0, n = NA, power = power,
r = r, sided.test = sided.test, conf.level = conf.level)
return(result)
if (result$n.exp1<30 && result$n.exp0<30) {
print("!!! WARNING !!! Both groups have size < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
else if (result$n.exp1<30 | result$n.exp0<30) {
print("!!! WARNING !!! One group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*result$n.exp1 <5 | pmean*result$n.exp0 <5) {
print("!!! WARNING !!! Theoretical effectives are < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
}
sample_proportion(p1=0.1, p0=0.5, power=0.8, r=3, sided.test=2, conf.level = 0.95)
sample_proportion <- function(p1, p0, power, r, sided.test=2, conf.level=0.95) {
result <- epi.sscohortc(irexp1 = p1, irexp0 = p0, n = NA, power = power,
r = r, sided.test = sided.test, conf.level = conf.level)
if (result$n.exp1<30 && result$n.exp0<30) {
print("!!! WARNING !!! Both groups have size < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
else if (result$n.exp1<30 | result$n.exp0<30) {
print("!!! WARNING !!! One group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*result$n.exp1 <5 | pmean*result$n.exp0 <5) {
print("!!! WARNING !!! Theoretical effectives are < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
return(result)
}
sample_proportion(p1=0.1, p0=0.5, power=0.8, r=3, sided.test=2, conf.level = 0.95)
SampleSize_SW <- function(p1, p0, r, power, sided.test=2, conf.level=0.95, center=15, sequence=5, icc=0.01) {
SampSize_I <- epi.sscohortc(irexp1 = 0.72, irexp0 = 0.62, n = NA, r = 1,
power = 0.80, sided.test = 2, conf.level = 1-0.05)
if (SampSize_I$n.exp1<30 | SampSize_I$n.exp0<30) {
print("!!! WARNING !!! At least one group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*SampSize_I$n.exp1 <5 | pmean*SampSize_I$n.exp0 <5 | (1-pmean)*SampSize_I$n.exp1 < 5 | (1-pmean)*SampSize_I$n.exp0 <5) {
print("!!! WARNING !!! At least one theoretical effective is < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
ni <- SampSize_I$n.total
aa <- -2*center*(sequence - 1/sequence)*icc*(1+sequence/2)
bb <- 3*ni*(1-icc)*icc*(1+sequence) - 2*center*(sequence -1/sequence)*(1-icc)
cc <- 3*ni*(1-icc)*(1-icc)
m1 <- (-bb + sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m2 <- (-bb - sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m_sol <- max(m1,m2)
Npat_center <- m_sol*(sequence+1)
N_tot_SW <- Npat_center*center
return(2*ceiling(N_tot_SW /2))
}
SampleSize_SW(p1 = 0.72, p0 = 0.62, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
sample_proportion <- function(p1, p0, power, r, sided.test=2, conf.level=0.95) {
result <- epi.sscohortc(irexp1 = p1, irexp0 = p0, n = NA, power = power,
r = r, sided.test = sided.test, conf.level = conf.level)
if (result$n.exp1<30 | result$n.exp0<30) {
print("!!! WARNING !!! At least one group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*result$n.exp1 <5 | pmean*result$n.exp0 <5 | (1-pmean)*result$n.exp1 < 5 | (1-pmean)*result$n.exp0 <5) {
print("!!! WARNING !!! At least one theoretical effective is < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
return(result)
}
calcsample <- sample_proportion(p1 = 0.35, p0 = 0.28, power = 0.80,
r = 1, sided.test = 2, conf.level = 1-0.05)
calcsample
SampleSize_SW <- function(p1, p0, r, power, sided.test=2, conf.level=0.95, center=15, sequence=5, icc=0.01) {
SampSize_I <- epi.sscohortc(irexp1 = 0.72, irexp0 = 0.62, n = NA, r = 1,
power = 0.80, sided.test = 2, conf.level = 1-0.05)
if (SampSize_I$n.exp1<30 | SampSize_I$n.exp0<30) {
print("!!! WARNING !!! At least one group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*SampSize_I$n.exp1 <5 | pmean*SampSize_I$n.exp0 <5 | (1-pmean)*SampSize_I$n.exp1 < 5 | (1-pmean)*SampSize_I$n.exp0 <5) {
print("!!! WARNING !!! At least one theoretical effective is < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
ni <- SampSize_I$n.total
aa <- -2*center*(sequence - 1/sequence)*icc*(1+sequence/2)
bb <- 3*ni*(1-icc)*icc*(1+sequence) - 2*center*(sequence -1/sequence)*(1-icc)
cc <- 3*ni*(1-icc)*(1-icc)
m1 <- (-bb + sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m2 <- (-bb - sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m_sol <- max(m1,m2)
Npat_center <- m_sol*(sequence+1)
N_tot_SW <- Npat_center*center
res <- c(SampSize_I$n.total,2*ceiling(N_tot_SW /2))
names(res) <- c("Individual randomisation (N)","Stepped-wedge (N)")
return(res)
}
SampleSize_SW(p1 = 0.72, p0 = 0.62, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW <- function(p1, p0, r, power, sided.test=2, conf.level=0.95, center=15, sequence=5, icc=0.01) {
SampSize_I <- epi.sscohortc(irexp1 = 0.72, irexp0 = 0.62, n = NA, r = 1,
power = 0.80, sided.test = 2, conf.level = 1-0.05)
if (SampSize_I$n.exp1<30 | SampSize_I$n.exp0<30) {
print("!!! WARNING !!! At least one group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*SampSize_I$n.exp1 <5 | pmean*SampSize_I$n.exp0 <5 | (1-pmean)*SampSize_I$n.exp1 < 5 | (1-pmean)*SampSize_I$n.exp0 <5) {
print("!!! WARNING !!! At least one theoretical effective is < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
ni <- SampSize_I$n.total
aa <- -2*center*(sequence - 1/sequence)*icc*(1+sequence/2)
bb <- 3*ni*(1-icc)*icc*(1+sequence) - 2*center*(sequence -1/sequence)*(1-icc)
cc <- 3*ni*(1-icc)*(1-icc)
m1 <- (-bb + sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m2 <- (-bb - sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m_sol <- max(m1,m2)
Npat_center <- m_sol*(sequence+1)
N_tot_SW <- Npat_center*center
res <- list(SampSize_I$n.total,2*ceiling(N_tot_SW /2))
names(res) <- c("n.indiv","n.SW")
return(res)
}
SampleSize_SW(p1 = 0.72, p0 = 0.62, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW <- function(p1, p0, r, power, sided.test=2, conf.level=0.95, center=15, sequence=5, icc=0.01) {
SampSize_I <- epi.sscohortc(irexp1 = p1, irexp0 = p0, n = NA, r = r,
power = power, sided.test = sided.test, conf.level = conf.level)
if (SampSize_I$n.exp1<30 | SampSize_I$n.exp0<30) {
print("!!! WARNING !!! At least one group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
pmean <- (p1+p0)/2
if (pmean*SampSize_I$n.exp1 <5 | pmean*SampSize_I$n.exp0 <5 | (1-pmean)*SampSize_I$n.exp1 < 5 | (1-pmean)*SampSize_I$n.exp0 <5) {
print("!!! WARNING !!! At least one theoretical effective is < 5, normality assumption is questionnable and sample size calculation may not be valid.")
}
ni <- SampSize_I$n.total
aa <- -2*center*(sequence - 1/sequence)*icc*(1+sequence/2)
bb <- 3*ni*(1-icc)*icc*(1+sequence) - 2*center*(sequence -1/sequence)*(1-icc)
cc <- 3*ni*(1-icc)*(1-icc)
m1 <- (-bb + sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m2 <- (-bb - sqrt(bb^2 - 4*aa*cc)) / (2*aa)
m_sol <- max(m1,m2)
Npat_center <- m_sol*(sequence+1)
N_tot_SW <- Npat_center*center
res <- list(SampSize_I$n.total,2*ceiling(N_tot_SW /2))
names(res) <- c("n.indiv","n.SW")
return(res)
}
SampleSize_SW(p1 = 0.72, p0 = 0.62, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.47, p0 = 0.51, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.47, p0 = 0.49, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.07, p0 = 0.04, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.02, p0 = 0.04, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.02, p0 = 0.05, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.02, p0 = 0.08, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.02, p0 = 0.18, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
SampleSize_SW(p1 = 0.02, p0 = 0.28, r = 1, power = 0.80, sided.test = 2,
conf.level = 1-0.05, center = 15, sequence = 5, icc = 0.01)
sample_proportion(p1=0.02, p0=0.28, power=0.8, r=1, sided.test=2, conf.level=0.95)
sample_proportion(p1=0.02, p0=0.5, power=0.8, r=1, sided.test=2, conf.level=0.95)
sample_proportion(p1=0.02, p0=0.05, power=0.8, r=1, sided.test=2, conf.level=0.95)
sample_proportion(p1=0.01, p0=0.05, power=0.8, r=1, sided.test=2, conf.level=0.95)
sample_mean <- function(mean1, mean0, sigma, power, r, sided.test, conf.level) {
result <- epi.sscompc(treat = mean1, control = mean0,	sigma = sigma, n = NA, power = power,
r = r, sided.test = sided.test, conf.level = conf.level)
if (result$n.treat<30 | result$n.control<30) {
print("!!! WARNING !!! At least one group size is < 30, normality assumption is questionnable and sample size calculation may not be valid.")
}
return(result)
}
sample_mean(mean1 = 66, mean0 = 72, sigma = 23, power = 0.8,
r = 1, sided.test = 2, conf.level = 1-0.05)
